@startuml



interface Statistics {
~getTitle():String
~setTitle(title: String)
~populateData()
~createFactory():StatisticsRegionFactory
}



class PieChartStatistics {
-Timestamp: startDate
-Timestamp: endDate
-ObservableList<Expense>: expenses
-String: title
-List<String>: formattedCategories
-List<Double>: formattedPercentages
-List<Category>: budgetCategories

+List<String>: getFormattedCategories()
+List<Double>: getFormattedPercentages()
+String: toString()
+Timestamp: getStartDate()
+Timestamp: getEndDate()
-generatePieChartData()
-generatePercentages(List<List<Expense>>, List<Double>, List<Integer>, List<String>,String)
-extractRelevantExpenses(Timestamp,Timestamp)
-List<Category> collateBudgetCategories(ObservableList<Expense>)
}



class TabularStatistics {

}



class TrendStatistics {
-Timestamp: startDate
-Timestamp: endDate
-Budget: primaryBudget
-boolean: budgetLimitMode
-ObservableList<Expense>: expenses
-List<Timestamp>: dates
-List<Double> periodicTotalExpenditures
-List<Double> periodicBudgetLimits
-List<List<Double>> periodicCategoricalExpenses
-String title;
-generateTrendLine()
-findClosestWindowStartDate(Timestamp, Timestamp, BudgetPeriod): Timestamp
-flatMapAdd(List<Double> categorisedExpenditureAtPeriod)
-List<List<Expense>> getCategorisedPeriodicExpenses(Timestamp, Timestamp)
-getExpenditureForCategory(List<Expense> categorisedExpenses): double
-getTotalExpenditure(List<List<Expense>> data): double
-getCategoricalExpenditure(List<List<Expense>> data): List<Double>
+List<List<Double>> getPeriodicCategoricalExpenses()
-{static} hasInterval (Timestamp validDate, Timestamp endDate, BudgetPeriod period): boolean
+getDates(): List<Timestamp>
-getPeriodicTotalExpenditure(): List<Double>
+ isBudgetLimitMode(): boolean
+ getStartDate(): Timestamp
+getEndDate(): Timestamp
+toString(): String
}











Statistics <|-- PieChartStatistics
Statistics <|-- TabularStatistics
Statistics <|-- TrendStatistics



@enduml
