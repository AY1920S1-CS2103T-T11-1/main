@startuml
!include style.puml

box UI UI_COLOR_T1
participant ":UiManager" as UiManager UI_COLOR
participant ":MainWindow" as MainWindow UI_COLOR
participant ":TranspiredEventsWindow" as TranspiredEventsWindow UI_COLOR
end box

box LOGIC LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
'participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
'participant ":AddBudgetCommandParser" as AddBudgetCommandParser LOGIC_COLOR
'participant "b:AddBudgetCommand" as AddBudgetCommand LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Timekeeper" as Timekeeper MODEL_COLOR
'participant ":Model" as Model MODEL_COLOR
'participant ":AddressBook" as AddressBook MODEL_COLOR
'participant ":UniqueBudgetList" as UniqueBudgetList MODEL_COLOR
end box

[-> UiManager : start(primaryStage)
activate UiManager

UiManager -> MainWindow : handleTranspiredEvents()
activate MainWindow

MainWindow -> LogicManager : getTranspiredEvents()
activate LogicManager

LogicManager -> Timekeeper : getTranspiredEvents()
activate Timekeeper

Timekeeper -> LogicManager : transpiredEvents
deactivate Timekeeper

LogicManager -> MainWindow : transpiredEvents

loop events in transpiredEvents
    create TranspiredEventsWindow
    MainWindow -> TranspiredEventsWindow : show(event)
    activate TranspiredEventsWindow
    alt user presses yes
    TranspiredEventsWindow -> TranspiredEventsWindow : addExpense()
    activate TranspiredEventsWindow
    TranspiredEventsWindow -> LogicManager : execute(originalInput)
    deactivate TranspiredEventsWindow
    else user presses no
    TranspiredEventsWindow -> TranspiredEventsWindow : ignore()
    end
    TranspiredEventsWindow --> MainWindow : void
    destroy TranspiredEventsWindow
end

@enduml
