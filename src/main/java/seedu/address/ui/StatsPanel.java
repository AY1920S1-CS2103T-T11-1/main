package seedu.address.ui;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.geometry.Side;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.StackPane;
import seedu.address.commons.core.LogsCenter;
import seedu.address.model.category.Category;
import seedu.address.model.expense.Timestamp;
import seedu.address.model.statistics.FiveElementTableEntry;
import seedu.address.ui.panel.Panel;
import seedu.address.ui.panel.PanelName;


/**
 * Panel containing the PieChart generated by a statistics command.
 */
public class StatsPanel extends Panel {

    public static final PanelName PANEL_NAME = new PanelName("Statistics");
    private static final String FXML = "StatsPanel.fxml";
    private final Logger logger = LogsCenter.getLogger(seedu.address.ui.StatsPanel.class);

    @FXML
    private StackPane titlePlaceHolder;

    @FXML
    private StackPane statisticsHolder;

    public StatsPanel(List<String> names, List<Double> percentages, String title) {

        super(FXML);

        titlePlaceHolder.setMinHeight(0);
        titlePlaceHolder.getChildren().add(new Label(title));

        ObservableList<PieChart.Data> details = FXCollections.observableArrayList();

        for (int i = 0; i < names.size(); i++) {
            String name = names.get(i);
            double percentage = percentages.get(i);
            details.add(new PieChart.Data(name, percentage));
        }

        PieChart pieChart = new PieChart();
        pieChart.setData(details);
        pieChart.setLegendSide(Side.BOTTOM);
        pieChart.setLabelsVisible(true);


        pieChart.setStartAngle(90);
        pieChart.setClockwise(false);

        statisticsHolder.getChildren().add(pieChart);

    }

    public StatsPanel(List<FiveElementTableEntry> rows, String title) {
        super(FXML);

        titlePlaceHolder.setMinHeight(0);
        titlePlaceHolder.getChildren().add(new Label(title));

        TableColumn<FiveElementTableEntry, String> nameColumn = new TableColumn<>("Category");
        nameColumn.setMinWidth(250);
        nameColumn.setCellValueFactory(new PropertyValueFactory<FiveElementTableEntry, String>("name"));

        TableColumn<FiveElementTableEntry, String> overlapAmountColumn = new TableColumn<>("Overlap Amount");
        overlapAmountColumn.setMinWidth(250);
        overlapAmountColumn.setCellValueFactory(
                new PropertyValueFactory<FiveElementTableEntry, String>("overlapAmount"));

        TableColumn<FiveElementTableEntry, String> overlapFrequencyColumn = new TableColumn<>("Overlap Frequency");
        overlapFrequencyColumn.setMinWidth(250);
        overlapFrequencyColumn.setCellValueFactory(
                new PropertyValueFactory<FiveElementTableEntry, String>("overlapNumEntries"));

        TableColumn<FiveElementTableEntry, String> differenceAmountColumn =
                new TableColumn<>("Difference Amount");
        differenceAmountColumn.setMinWidth(250);
        differenceAmountColumn.setCellValueFactory(
                new PropertyValueFactory<FiveElementTableEntry, String>("differenceAmount"));

        TableColumn<FiveElementTableEntry, String> differenceFrequencyColumn =
                new TableColumn<>("Difference Frequency");
        differenceFrequencyColumn.setMinWidth(250);
        differenceFrequencyColumn.setCellValueFactory(
                new PropertyValueFactory<FiveElementTableEntry, String>("differenceNumEntries"));



        TableView<FiveElementTableEntry> table = new TableView<>();
        table.setItems(getTableEntries(rows));

        table.getColumns().addAll(nameColumn, overlapAmountColumn, overlapFrequencyColumn,
                differenceAmountColumn, differenceFrequencyColumn);

        statisticsHolder.getChildren().add(table);
    }


    //again standardise the notation of category, categorical and total

    //what do I do with methods of the same erasure? Add boolean or should I just rearrange?
    public StatsPanel(String title, List<Timestamp> dates, List<ArrayList<Double>> periodicCategoricalExpenses) {
        super(FXML);

        titlePlaceHolder.setMinHeight(0);
        titlePlaceHolder.getChildren().add(new Label(title));

        CategoryAxis xAxis = new CategoryAxis();
        NumberAxis yAxis = new NumberAxis();

        LineChart<String, Number> lineChart = new LineChart<>(xAxis, yAxis);

        lineChart.getData().clear();


        List<Category> categories = Category.getValidCategories();
        for (int i = 0; i < categories.size(); i++) {
            Category category = categories.get(i);
            XYChart.Series<String, Number> categoryTrendLine = new XYChart.Series<String, Number>();
            categoryTrendLine.setName(category.getCategoryName());
            ArrayList<Double> periodicCategoricalExpenditure = periodicCategoricalExpenses.get(i);
            int numberOfZeroes = 0;
            for (int j = 0; j < periodicCategoricalExpenditure.size(); j++) {
                double yValue = periodicCategoricalExpenditure.get(j);
                if (yValue == 0) {
                    numberOfZeroes++;
                }
                categoryTrendLine.getData().add(new XYChart.Data<String, Number>(dates.get(j).showDate(), yValue));
            }

            if (numberOfZeroes != periodicCategoricalExpenditure.size()) {
                lineChart.getData().add(categoryTrendLine);
            }
        }

        statisticsHolder.getChildren().add(lineChart);
    }


    public StatsPanel(List<Timestamp> dates, List<Double> periodicTotal, List<Double> periodicLimit, String title) {
        super(FXML);

        titlePlaceHolder.setMinHeight(0);
        titlePlaceHolder.getChildren().add(new Label(title));

        CategoryAxis xAxis = new CategoryAxis();
        NumberAxis yAxis = new NumberAxis();

        LineChart<String, Number> lineChart = new LineChart<>(xAxis, yAxis);

        lineChart.getData().clear();

        XYChart.Series<String, Number> expenseTrendLine = new XYChart.Series<String, Number>();
        expenseTrendLine.setName("Total money spent");
        XYChart.Series<String, Number> budgetLimitTrendLine = new XYChart.Series<String, Number>();
        budgetLimitTrendLine.setName("Budget limit");
        //need a better hard-coded parser
        for (int i = 0; i < dates.size(); i++) {
            expenseTrendLine.getData().add(
                    new XYChart.Data<String, Number>(dates.get(i).showDate(), periodicTotal.get(i)));
            budgetLimitTrendLine.getData().add(
                    new XYChart.Data<String, Number>(dates.get(i).showDate(), periodicLimit.get(i)));
        }

        lineChart.getData().addAll(expenseTrendLine, budgetLimitTrendLine);

        statisticsHolder.getChildren().add(lineChart);

    }


    private ObservableList<FiveElementTableEntry> getTableEntries(List<FiveElementTableEntry> rows) {
        ObservableList<FiveElementTableEntry> result = FXCollections.observableArrayList();
        result.addAll(rows);
        return result;
    }


    @Override
    public void view() {
        getRoot().setVisible(true);
        getRoot().setDisable(false);
    }

    @Override
    public void hide() {
        getRoot().setVisible(false);
        getRoot().setDisable(true);
    }
}

